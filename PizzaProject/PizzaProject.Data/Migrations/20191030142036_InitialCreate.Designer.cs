// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaProject.Data;

namespace PizzaProject.Data.Migrations
{
    [DbContext(typeof(PizzaProjectContext))]
    [Migration("20191030142036_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("PizzaProject.Domain.Entities.Customization", b =>
                {
                    b.Property<string>("UId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AdicionalTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UId");

                    b.ToTable("Customizations");
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.Flavor", b =>
                {
                    b.Property<string>("UId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AdicionalTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UId");

                    b.ToTable("Flavors");
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.Order", b =>
                {
                    b.Property<string>("UId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PizzaUId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeToPrepare")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UId");

                    b.HasIndex("PizzaUId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.Pizza", b =>
                {
                    b.Property<string>("UId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlavorUId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SizeUId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UId");

                    b.HasIndex("FlavorUId");

                    b.HasIndex("SizeUId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.PizzaCustomization", b =>
                {
                    b.Property<string>("UId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomizationUId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PizzaUId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UId");

                    b.HasIndex("CustomizationUId");

                    b.HasIndex("PizzaUId");

                    b.ToTable("PizzaCustomizations");
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.PizzaSize", b =>
                {
                    b.Property<string>("UId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("TimeToPrepare")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UId");

                    b.ToTable("PizzaSizes");
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.Order", b =>
                {
                    b.HasOne("PizzaProject.Domain.Entities.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaUId");
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.Pizza", b =>
                {
                    b.HasOne("PizzaProject.Domain.Entities.Flavor", "Flavor")
                        .WithMany("Pizzas")
                        .HasForeignKey("FlavorUId")
                        .HasConstraintName("FlavorUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaProject.Domain.Entities.PizzaSize", "Size")
                        .WithMany("Pizzas")
                        .HasForeignKey("SizeUId")
                        .HasConstraintName("PizzaSizeUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaProject.Domain.Entities.PizzaCustomization", b =>
                {
                    b.HasOne("PizzaProject.Domain.Entities.Customization", "Customization")
                        .WithMany("PizzaCustomizations")
                        .HasForeignKey("CustomizationUId");

                    b.HasOne("PizzaProject.Domain.Entities.Pizza", "Pizza")
                        .WithMany("PizzaCustomizations")
                        .HasForeignKey("PizzaUId");
                });
#pragma warning restore 612, 618
        }
    }
}
